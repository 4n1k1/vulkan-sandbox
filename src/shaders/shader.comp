#version 450
#extension GL_ARB_separate_shader_objects : enable

struct Vertex
{
	vec4 position;
	vec4 color;
};

layout(binding=0) buffer Vertices
{
	Vertex vertices[];
};

layout(binding=1) buffer Indices
{
	uint indices[];
};

layout(binding=2) uniform UniformBufferObject
{
	mat4 model;
	mat4 view;
	mat4 proj;

	uint particle_count;
	float particle_radius;

} ubo;

layout(binding=3) buffer Particles
{
	Vertex particles[];
};

void main()
{
	uint particle_idx = gl_GlobalInvocationID.x;

	if (particle_idx >= ubo.particle_count) return;

	uint first_vertex_idx = particle_idx * 4;
	uint first_index_idx = particle_idx * 6;

	/*
		Validation layer issue below.
		https://github.com/KhronosGroup/glslang/commit/4bf71550519121504c171a8c5b569d048e78d597
		TODO: remove that comment after validation layer issue is gone
	*/
	Vertex particle = particles[particle_idx];

	particle.position = ubo.proj * ubo.view * ubo.model * particle.position;

	uint v_idx_0 = first_vertex_idx;

	vertices[v_idx_0].position.x = particle.position.x - ubo.particle_radius;
	vertices[v_idx_0].position.y = particle.position.y + ubo.particle_radius;
	vertices[v_idx_0].position.z = particle.position.z;
	vertices[v_idx_0].position.w = particle.position.w;
	vertices[v_idx_0].color = particle.color;

	uint v_idx_1 = v_idx_0 + 1;

	vertices[v_idx_1].position.x = particle.position.x - ubo.particle_radius;
	vertices[v_idx_1].position.y = particle.position.y - ubo.particle_radius;
	vertices[v_idx_1].position.z = particle.position.z;
	vertices[v_idx_1].position.w = particle.position.w;
	vertices[v_idx_1].color = particle.color;

	uint v_idx_2 = v_idx_1 + 1;

	vertices[v_idx_2].position.x = particle.position.x + ubo.particle_radius;
	vertices[v_idx_2].position.y = particle.position.y - ubo.particle_radius;
	vertices[v_idx_2].position.z = particle.position.z;
	vertices[v_idx_2].position.w = particle.position.w;
	vertices[v_idx_2].color = particle.color;

	uint v_idx_3 = v_idx_2 + 1;

	vertices[v_idx_3].position.x = particle.position.x + ubo.particle_radius;
	vertices[v_idx_3].position.y = particle.position.y + ubo.particle_radius;
	vertices[v_idx_3].position.z = particle.position.z;
	vertices[v_idx_3].position.w = particle.position.w;
	vertices[v_idx_3].color = particle.color;

	uint i_idx = first_index_idx;

	indices[i_idx] = v_idx_0; i_idx += 1;
	indices[i_idx] = v_idx_1; i_idx += 1;
	indices[i_idx] = v_idx_2; i_idx += 1;

	indices[i_idx] = v_idx_0; i_idx += 1;
	indices[i_idx] = v_idx_2; i_idx += 1;
	indices[i_idx] = v_idx_3;
}
